using System;
using System.Windows;
using System.Windows.Controls;
using BusinessLayer.Service;
using BusinessLayer.IService;
using DataAccessLayer.Repository;
using DataAccessLayer.IRepository;
using DataAccessLayer.Models;

namespace WPFCatLoaf
{
    /// <summary>
    /// Interaction logic for LoginWindow.xaml
    /// </summary>
    public partial class LoginWindow : Window
    {
        private readonly IUserService _userService;
        private bool _isPasswordVisible = false;

        public LoginWindow()
        {
            InitializeComponent();
            
            // Initialize services - dependency injection pattern
            var context = new LoafNcattingDbContext();
            IUserRepository userRepository = new UserRepository(context);
            _userService = new UserService(userRepository);
        }

        private void ShowPasswordButton_Click(object sender, RoutedEventArgs e)
        {
            if (_isPasswordVisible)
            {
                // Hide password
                PasswordTextBox.Text = "";
                PasswordTextBox.Visibility = Visibility.Collapsed;
                PasswordBox.Visibility = Visibility.Visible;
                ShowPasswordIcon.Kind = MaterialDesignThemes.Wpf.PackIconKind.Eye;
                _isPasswordVisible = false;
            }
            else
            {
                // Show password
                PasswordTextBox.Text = PasswordBox.Password;
                PasswordBox.Visibility = Visibility.Collapsed;
                PasswordTextBox.Visibility = Visibility.Visible;
                ShowPasswordIcon.Kind = MaterialDesignThemes.Wpf.PackIconKind.EyeOff;
                _isPasswordVisible = true;
            }
        }

        private async void LoginButton_Click(object sender, RoutedEventArgs e)
        {
            // Validate input
            if (string.IsNullOrWhiteSpace(EmailTextBox.Text))
            {
                ShowErrorMessage("Vui lòng nhập email!");
                EmailTextBox.Focus();
                return;
            }

            string password = _isPasswordVisible ? PasswordTextBox.Text : PasswordBox.Password;
            if (string.IsNullOrWhiteSpace(password))
            {
                ShowErrorMessage("Vui lòng nhập mật khẩu!");
                if (_isPasswordVisible)
                    PasswordTextBox.Focus();
                else
                    PasswordBox.Focus();
                return;
            }

            // Validate email format
            if (!IsValidEmail(EmailTextBox.Text))
            {
                ShowErrorMessage("Email không hợp lệ!");
                EmailTextBox.Focus();
                return;
            }

            // Show loading
            SetLoadingState(true);
            HideErrorMessage();

            try
            {
                // Call your UserService to authenticate
                var user = await Task.Run(() => _userService.GetUserByEmailAndPassword(EmailTextBox.Text.Trim(), password));

                if (user != null)
                {
                    // Check role based on radio button selection
                    bool isCustomerSelected = CustomerRadio.IsChecked == true;
                    bool isValidRole = IsValidUserRole(user, isCustomerSelected);

                    if (!isValidRole)
                    {
                        ShowErrorMessage(isCustomerSelected ? 
                            "Tài khoản này không phải là tài khoản khách hàng!" : 
                            "Tài khoản này không phải là tài khoản nhân viên!");
                        SetLoadingState(false);
                        return;
                    }

                    // Login successful
                    ShowSuccessMessage($"Đăng nhập thành công! Chào mừng {user.Name}");
                    
                    // Store user info for session (you might want to use a better approach)
                    Application.Current.Properties["CurrentUser"] = user;
                    Application.Current.Properties["UserRole"] = isCustomerSelected ? "Customer" : "Staff";

                    // Navigate to main window
                    await Task.Delay(1500); // Show success message briefly
                    
                    MainWindow mainWindow = new MainWindow();
                    mainWindow.Show();
                    this.Close();
                }
                else
                {
                    ShowErrorMessage("Email hoặc mật khẩu không chính xác!");
                }
            }
            catch (Exception ex)
            {
                ShowErrorMessage($"Lỗi đăng nhập: {ex.Message}");
            }
            finally
            {
                SetLoadingState(false);
            }
        }

        private bool IsValidUserRole(User user, bool isCustomerSelected)
        {
            // Assuming Role IDs: 1 = Customer, 2 = Staff/Employee
            // You should adjust these values based on your actual role setup
            if (isCustomerSelected)
            {
                return user.RoleId == 1; // Customer role
            }
            else
            {
                return user.RoleId == 2; // Staff role
            }
        }

        private bool IsValidEmail(string email)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }

        private void ShowErrorMessage(string message)
        {
            ErrorMessageText.Text = message;
            ErrorMessageText.Foreground = System.Windows.Media.Brushes.Red;
            ErrorMessageText.Visibility = Visibility.Visible;
        }

        private void ShowSuccessMessage(string message)
        {
            ErrorMessageText.Text = message;
            ErrorMessageText.Foreground = System.Windows.Media.Brushes.Green;
            ErrorMessageText.Visibility = Visibility.Visible;
        }

        private void HideErrorMessage()
        {
            ErrorMessageText.Visibility = Visibility.Collapsed;
        }

        private void SetLoadingState(bool isLoading)
        {
            LoadingProgressBar.Visibility = isLoading ? Visibility.Visible : Visibility.Collapsed;
            LoginButton.IsEnabled = !isLoading;
            EmailTextBox.IsEnabled = !isLoading;
            PasswordBox.IsEnabled = !isLoading;
            PasswordTextBox.IsEnabled = !isLoading;
            ShowPasswordButton.IsEnabled = !isLoading;
            CustomerRadio.IsEnabled = !isLoading;
            StaffRadio.IsEnabled = !isLoading;
        }

        private void RegisterLink_Click(object sender, RoutedEventArgs e)
        {
            // TODO: Implement registration window
            MessageBox.Show("Chức năng đăng ký sẽ được phát triển sau!", 
                          "Thông báo", 
                          MessageBoxButton.OK, 
                          MessageBoxImage.Information);
        }

        // Handle Enter key press for login
        private void Window_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (e.Key == System.Windows.Input.Key.Enter)
            {
                LoginButton_Click(sender, e);
            }
        }

        // Add KeyDown event to constructor
        private void LoginWindow_Loaded(object sender, RoutedEventArgs e)
        {
            this.KeyDown += Window_KeyDown;
            EmailTextBox.Focus();
        }
    }
}
